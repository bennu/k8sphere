apiVersion: kubeadm.k8s.io/v1beta1
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ init_random_token }}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: {{ control_plane_port }}
nodeRegistration:
{% if cri_runtime == 'containerd' or cri_runtime == 'kata-containerd' %}
  criSocket: /var/run/containerd/containerd.sock
{% elif cri_runtime == 'docker' %}
  criSocket: /var/run/dockershim.sock
{% endif %}
  kubeletExtraArgs:
{% if provider_enabled == '1' %}
    cloud-provider: "vsphere"
    cloud-config: "/etc/kubernetes/cloud-provider"
{% endif %}
{% if kubelet_feature_gates != "" %}
    feature-gates: "{{ kubelet_feature_gates }}"
{% endif %}
  name: {{ ansible_hostname }}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
  certSANs:
  {{ api_server_cert_sans | to_nice_yaml }}
  extraArgs:
    allow-privileged: "true"
    authorization-mode: "Node,RBAC"
{% if provider_enabled == '1' %}
    cloud-provider: "vsphere"
    cloud-config: "/etc/kubernetes/cloud-provider"
{% endif %}
    endpoint-reconciler-type: "lease" # needs k8s 1.9+ More info: https://kubernetes.io/docs/admin/high-availability/building/#endpoint-reconciler
{% if api_server_feature_gates != "" %}
    feature-gates: "{{ api_server_feature_gates }}"
{% endif %}
    runtime-config: "api/all=true"
{% if provider_enabled == '1' %}
  extraVolumes:
    - name: "cloud-provider"
      hostPath: "/etc/kubernetes/cloud-provider"
      mountPath: "/etc/kubernetes/cloud-provider"
{% endif %}
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta1
certificatesDir: /etc/kubernetes/pki
clusterName: {{ cluster_name }}
controlPlaneEndpoint: "{{ ansible_default_ipv4.address }}:{{ control_plane_port }}"
controllerManager:
  extraArgs:
{% if provider_enabled == '1' %}
    cloud-provider: "vsphere"
    cloud-config: "/etc/kubernetes/cloud-provider"
{% endif %}
{% if controller_manager_feature_gates != "" %}
    feature-gates: "{{ controller_manager_feature_gates }}"
{% endif %}
    horizontal-pod-autoscaler-use-rest-clients: "true"
    horizontal-pod-autoscaler-sync-period: "10s"
    node-monitor-grace-period: "10s"
{% if provider_enabled == '1' %}
  extraVolumes:
    - name: "cloud-provider"
      hostPath: "/etc/kubernetes/cloud-provider"
      mountPath: "/etc/kubernetes/cloud-provider"
{% endif %}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
    # image: ""
    # extraArgs:
    #   listen-client-urls: "http://{{ ansible_default_ipv4.address }}:2379"
imageRepository: {{ image_repository }}
kind: ClusterConfiguration
kubernetesVersion: {{ kubernetes_version }}
networking:
  dnsDomain: {{ dns_domain }}
  podSubnet: {{ pod_subnet }}
  serviceSubnet: {{ service_subnet }}
scheduler:
  extraArgs:
{% if scheduler_feature_gates != "" %}
    feature-gates: "{{ scheduler_feature_gates }}"
{% endif %}
useHyperKubeImage: {{ use_hyperkube }}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
bindAddress: 0.0.0.0
clientConnection:
  acceptContentTypes: ""
  burst: 10
  contentType: application/vnd.kubernetes.protobuf
  kubeconfig: /var/lib/kube-proxy/kubeconfig.conf
  qps: 5
clusterCIDR: {{ cluster_cidr }}
configSyncPeriod: 15m0s
conntrack:
  max: null
  maxPerCore: 32768
  min: 131072
  tcpCloseWaitTimeout: 1h0m0s
  tcpEstablishedTimeout: 24h0m0s
enableProfiling: false
healthzBindAddress: 0.0.0.0:10256
# hostnameOverride: ""
iptables:
  masqueradeAll: false
  masqueradeBit: 14
  minSyncPeriod: 0s
  syncPeriod: 30s
ipvs:
  excludeCIDRs: null
  minSyncPeriod: 0s
  scheduler: ""
  syncPeriod: 30s
kind: KubeProxyConfiguration
metricsBindAddress: 127.0.0.1:10249
# mode: ""
nodePortAddresses: null
oomScoreAdj: -999
portRange: ""
resourceContainer: /kube-proxy
udpIdleTimeout: 250ms
---
address: 0.0.0.0
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    cacheTTL: 2m0s
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt
authorization:
  mode: Webhook
  webhook:
    cacheAuthorizedTTL: 5m0s
    cacheUnauthorizedTTL: 30s
cgroupDriver: cgroupfs
cgroupsPerQOS: true
clusterDNS:
{{ cluster_dns | to_nice_yaml -}}
clusterDomain: {{ cluster_domain }}
configMapAndSecretChangeDetectionStrategy: Watch
containerLogMaxFiles: 5
containerLogMaxSize: 10Mi
contentType: application/vnd.kubernetes.protobuf
cpuCFSQuota: true
cpuCFSQuotaPeriod: 100ms
cpuManagerPolicy: none
cpuManagerReconcilePeriod: 10s
enableControllerAttachDetach: true
enableDebuggingHandlers: true
enforceNodeAllocatable:
- pods
eventBurst: 10
eventRecordQPS: 5
evictionHard:
  imagefs.available: 15%
  memory.available: 100Mi
  nodefs.available: 10%
  nodefs.inodesFree: 5%
evictionPressureTransitionPeriod: 5m0s
failSwapOn: true
fileCheckFrequency: 20s
hairpinMode: promiscuous-bridge
healthzBindAddress: 127.0.0.1
healthzPort: 10248
httpCheckFrequency: 20s
imageGCHighThresholdPercent: 85
imageGCLowThresholdPercent: 80
imageMinimumGCAge: 2m0s
iptablesDropBit: 15
iptablesMasqueradeBit: 14
kind: KubeletConfiguration
kubeAPIBurst: 10
kubeAPIQPS: 5
makeIPTablesUtilChains: true
maxOpenFiles: 1000000
maxPods: 110
nodeLeaseDurationSeconds: 40
nodeStatusUpdateFrequency: 10s
oomScoreAdj: -999
podPidsLimit: -1
port: 10250
registryBurst: 10
registryPullQPS: 5
resolvConf: /etc/resolv.conf
rotateCertificates: true
runtimeRequestTimeout: 2m0s
serializeImagePulls: true
staticPodPath: /etc/kubernetes/manifests
streamingConnectionIdleTimeout: 4h0m0s
syncFrequency: 1m0s
volumeStatsAggPeriod: 1m0s
